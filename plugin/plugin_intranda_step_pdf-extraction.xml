<?xml version="1.0" encoding="UTF-8"?>
<configs>

	<config>

		<project>*</project>
		<step>OCR-Extraktion</step>

		<validation>
			<!-- set to false to skip this step if no PDF files exist in the source folder -->
			<!-- DEFAULT true -->
			<failOnMissingPDF>true</failOnMissingPDF>
		</validation>
		
		<!-- Set how the generated files should be named. Comment out all strategies execpt one that should be used
			 Default strategy is CONSECUTIVE_COUNT -->
		<fileNaming>
			<!-- CONSECUTIVE_COUNT: Name the files after their order within the record in an 8-digit format, starting with '00000001' -->
			<strategy>CONSECUTIVE_COUNT</strategy>
			<!-- Name the files after the imported pdf file. If the pdf file contains more than one page, 
				 each filename is appended by a 3-digit counter, starting with 001 for each pdf -->
<!-- 			<strategy>PDF_FILENAME</strategy> -->
		</fileNaming>
		
		<!-- if true then all old data from tifFolder, pdfFolder, textFolder and altoFolder will be deleted, and all file references will be removed if current book is not empty -->
		<!-- DEFAULT true -->
		<overwriteExistingData>true</overwriteExistingData>

		<mets>
			<!-- DEFAULT true -->
			<write>false</write>
			<!-- DEFAULT true -->
			<failOnError>false</failOnError>
			<!-- Settings for writing Mets-Structure -->
			<docType>
				<!-- If this element exists and is not empty then for each imported pdf 
				a new StructElement of the given type is created within the top StructElement. -->
				<parent>Chapter</parent>
				<!-- If this element exists and is not empty then the table-of-content structure of the pdf is
				written into the Mets file. Each structure element of the PDF is written as a StructElement of the given type. -->
				<children>Chapter</children>
			</docType>
		</mets>

		<images>
			<!-- DEFAULT true -->
			<write>false</write>
			<!-- DEFAULT true -->
			<failOnError>true</failOnError>
			<!-- The resolution with which to scan the PDF file. This has a large impact on both image file size and quality. DEFAULT 300. -->
			<resolution>300</resolution>
			<!-- The image format for the image files written. DEFAULT tif. -->
			<!-- Allowed formats for the generator pdftoppm are png, jpg, jpeg, jpegcmyk, tif, tiff.  -->
			<format>tif</format>
			<!-- Select the command line tool which should be used to create the images. Either 'ghostscript' or 'pdftoppm'. -->
			<generator>pdftoppm</generator>						
			<!-- A parameter to add to the generator call. Repeatable -->
			<generatorParameter>-cropbox</generatorParameter>
			<!-- Hardcoded parameters for ghostscript are: -dUseCropBox, -SDEVICE, -r<res>, -sOutputFile, -dNOPAUSE, -dBATCH.
			     Useful parameters for configuration are:
			     ===================================================
			     -q                         `quiet`, fewer messages
			     ...................................................
			     -g<width>x<height>          page size in pixels 
			     ===================================================
			-->
			<!-- Hardcoded parameters for pdftoppm are: -{format}, -r.
			     Useful parameters for configuration are:
			     ======================================================================================================
			     -f <int>                           first page to print
			     ......................................................................................................
			     -l <int>                           last page to print
			     ......................................................................................................
			     -o                                 print only odd pages
			     ......................................................................................................
			     -e                                 print only even pages
			     ......................................................................................................
			     -singlefile                        write only the first page and do not add digits
			     ......................................................................................................
			     -scale-dimension-before-rotation   for rotated pdf, resize dimensions before the rotation
			     ......................................................................................................
			     -rx <fp>                           X resolution, in DPI
			     ......................................................................................................
			     -ry <fp>                           Y resolution, in DPI
			     ......................................................................................................
			     -scale-to <int>                    scales each page to fit within scale-to*scale-to pixel box
			     ......................................................................................................
			     -scale-to-x <int>                  scales each page horizontally to fit in scale-to-x pixels
			     ......................................................................................................
			     -scale-to-y <int>                  scales each page vertically to fit in scale-to-y pixels
			     ......................................................................................................
			     -x <int>                           x-coordinate of the crop area top left corner
			     ......................................................................................................
			     -y <int>                           y-coordinate of the crop area top left corner
			     ......................................................................................................
			     -W <int>                           width of crop area in pixels (DEFAULT 0)
			     ......................................................................................................
			     -H <int>                           height of crop area in pixels (DEFAULT 0)
			     ......................................................................................................
			     -sz <int>                          size of crop square in pixels (sets W and H)
			     ......................................................................................................
			     -cropbox                           use the crop box rather than media box
			     ......................................................................................................
			     -hide-annotations                  do not show annotations
			     ......................................................................................................
			     -mono                              generate a monochrome PBM file
			     ......................................................................................................
			     -gray                              generate a grayscale PGM file
			     ......................................................................................................
			     -sep <string>                      single character separator between name and page number (DEFAULT -)
			     ......................................................................................................
			     -forcenum                          force page number even if there is only one page
			     ......................................................................................................
			     -overprint                         enable overprint
			     ......................................................................................................
			     -freetype <string>                 enable FreeType font rasterizer: yes, no
			     ......................................................................................................
			     -thinlinemode <string>             set thin line mode: none, solid, shape. DEFAULT none.
			     ......................................................................................................
			     -aa <string>                       enable font anti-aliasing: yes, no
			     ......................................................................................................
			     -aaVector <string>                 enable vector anti-aliasing: yes, no
			     ......................................................................................................
			     -opw <string>                      owner password (for encrypted files)
			     ......................................................................................................
			     -upw <string>                      user password (for encrypted files)
			     ......................................................................................................
			     -q                                 don't print any messages or errors
			     ......................................................................................................
			     -progress                          print progress info
			     ......................................................................................................
			     -tiffcompression <string>          set TIFF compression: none, packbits, jpeg, lzw, deflate
			     ======================================================================================================
			-->
		</images>

		<plaintext>
			<!-- DEFAULT true -->
			<write>true</write>
			<!-- DEFAULT true -->
			<failOnError>false</failOnError>
		</plaintext>

		<alto>
			<!-- DEFAULT true -->
			<write>true</write>
			<!-- DEFAULT true -->
			<failOnError>false</failOnError>
		</alto>

		<pagePdfs>
			<!-- DEFAULT true -->
			<write>true</write>
			<!-- DEFAULT true -->
			<failOnError>true</failOnError>
		</pagePdfs>

		<properties>
			<!-- Write this process property after extraction is done. The value depends on whether any ocr files with content have been written. -->
			<!-- If there exist some properties named so, then the first one will be picked up to accept the value.
			Otherwise a new process property will be created for this purpose. ONLY 1 fulltext tag is allowed.  -->
			<fulltext>
				<!-- process property name. If blank, no property will be written -->
				<name>OCRDone</name>
				<!-- property value when there are alto contents or text contents created. DEFAULT TRUE. -->
				<value exists="true">YES</value>
				<!-- property value when there are neither contents nor text contents created. DEFAULT FALSE. -->
				<value exists="false">NO</value>
			</fulltext>
		</properties>

	</config>

	<config>

		<project>*</project>
		<step>*</step>

		<validation>
			<!-- if 'true', the step will be set to error status if there are not pdfs found to extract. Otherwise
				the step will be marked as completed if no pdfs are found -->
			<failOnMissingPDF>true</failOnMissingPDF>
		</validation>
		
		<!-- Set how the generated files should be named. Comment out all strategies execpt one that should be used
			 Default strategy is CONSECUTIVE_COUNT -->
		<fileNaming>
			<!-- CONSECUTIVE_COUNT: Name the files after their order within the record in an 8-digit format, starting with '00000001' -->
			<strategy>CONSECUTIVE_COUNT</strategy>
			<!-- Name the files after the imported pdf file. If the pdf file contains more than one page, 
				 each filename is appended by a 3-digit counter, starting with 001 for each pdf -->
<!-- 			<strategy>PDF_FILENAME</strategy> -->
		</fileNaming>
	
		<!-- If set to false, the data from new pdfs will be added to the existing files. Otherwise, all
			existing extracted files will be deleted before running the extraction again -->
		<overwriteExistingData>true</overwriteExistingData>

		<!-- The path where the source pdfs are expected. May be a goobi variable -->
		<sourceFolder>{origpath}</sourceFolder>
		<!-- The path where the source pdfs are moved to after extraction. May be a goobi variable -->
		<targetFolder>{importpath}</targetFolder>

		<mets>
			<write>true</write>
			<failOnError>false</failOnError>
			<docType>
				<!-- If this element exists and is not empty then for each imported pdf 
				a new StructElement of the given type is created within the top StructElement. -->
				<parent>Chapter</parent>
				<!-- If this element exists and is not empty then the table-of-content structure of the pdf is
				written into the Mets file. Each structure element of the PDF is written as a StructElement of the given type. -->
				<children>Chapter</children>
			</docType>
		</mets>

		<!-- settings for writing image files -->
		<images>
			<!-- whether to extract image files from pdf -->
			<write>true</write>
			<failOnError>true</failOnError>
			<!-- folder to which to write the image files. May be a goobi variable -->
			<destination>{tifpath}</destination>
			<!-- The resolution with which to scan the PDF file. This has a large impact on both image file size and quality. DEFAULT 300. -->
			<resolution>300</resolution>
			<!-- The image format for the image files written. DEFAULT tif. -->
			<!-- Allowed formats for the generator pdftoppm are png, jpg, jpeg, jpegcmyk, tif, tiff.  -->
			<format>tif</format>
			<!-- Select the command line tool which should be used to create the images. Either 'ghostscript' or 'pdftoppm'. -->
			<generator>pdftoppm</generator>
			<!-- A parameter to add to the generator call. Repeatable 
				since whitespaces within a generatorParameter are not supported, each parameter must be declared as 
				a new <generatorParameter> -->			
			<generatorParameter>-cropbox</generatorParameter>
		</images>

		<plaintext>
			<write>true</write>
			<failOnError>false</failOnError>
			<!-- folder to which to write the text files. May be a goobi variable -->
			<destination>{processpath}/ocr/{processtitle}_txt</destination>
		</plaintext>

		<alto>
			<write>true</write>
			<failOnError>false</failOnError>
			<!-- folder to which to write the alto files. May be a goobi variable -->
			<destination>{processpath}/ocr/{processtitle}_alto</destination>
		</alto>

		<pagePdfs>
			<write>true</write>
			<failOnError>false</failOnError>
			<!-- folder to which to write the page pdf files. May be a goobi variable -->
			<destination>{processpath}/ocr/{processtitle}_pdf</destination>
		</pagePdfs>

		<!-- process properties to write after step completion. Currently only <fulltext> is supported -->
		<properties>
			<!-- Write a property declaring whether any ocr files were created -->
			<fulltext>
				<!-- name of the property -->
				<name>OCRDone</name>
				<!-- Value to write if ocr files exist -->
				<value exists="true">YES</value>
				<!-- Value to write if no ocr files exist -->
				<value exists="false">NO</value>
			</fulltext>
		</properties>

	</config>

</configs>
